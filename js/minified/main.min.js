var isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
var isFirefox = typeof InstallTrigger !== 'undefined';
var isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === "[object SafariRemoteNotification]"; })(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification));
var isIE = /*@cc_on!@*/false || !!document.documentMode;
var isEdge = !isIE && !!window.StyleMedia;
var isChrome = !!window.chrome && !!window.chrome.webstore;
var isBlink = (isChrome || isOpera) && !!window.CSS;
function getBrowserName(){
	var name='';
	if(isOpera){
		name+='Opera';
	}
	if(isFirefox){
		name+='Firefox';
	}
	if(isSafari){
		name+='Safari';
	}
	if(isIE){
		name+='IE';
	}
	if(isEdge){
		name+='Edge';
	}
	if(isChrome){
		name+='Chrome';
	}
	if(isBlink){
		name+='Blink';
	}
	return name;
}

/*
~~
VUE
~~
*/
Vue.component("main-theme", {
  props:[
    'title',
    'socialMediaLinks',
    'headerButtons',
    'backgroundCanvasConfig'
  ],
  methods:{
    getGithubLink:function(tmpSocialMediaLinks){
      for(var k in tmpSocialMediaLinks){
        if(tmpSocialMediaLinks[k].icon=='github'){
          return tmpSocialMediaLinks[k].address;
        }
      }
    }
  },
  template: `
  <div class="main-theme">
    <background-canvas :config="backgroundCanvasConfig"></background-canvas>
    <div style="z-index:10;">
      <main-header :buttons="headerButtons" :social-media-links="socialMediaLinks">{{title}}</main-header>
      <main class="main-theme">
        <slot></slot>
      </main>
      <main-footer :github="getGithubLink(socialMediaLinks)"></main-footer>
    </div>
  </div>
  `
});
Vue.component("background-canvas", {
  props:['config'],
  template: `
    <canvas :id="config.id"  class="background-canvas"  width="300" height="300"></canvas>
  `
});
/*
ROKITA 1.0.0
by Sarverott 2018
MIT Licence
*/


Vue.component("main-footer", {
  props:['title', 'github'],
  data:function(){
    return {
      currentDate:(new Date()).getFullYear()
    };
  },
  methods:{},
  template: `
  <footer class="main-layout container-fluid">
    <div class="top-of-foot">
      <div class="top-foot-item foot-center">Sarverott @ 2012-{{currentDate}}</div>
      <div class="top-foot-item foot-right">visit my <a class="" :href="github">Github</a> profile</div>
    </div>
    <div class="row">
      <div class="col-sm-4">
        <div>

        </div>
      </div>
      <div class="col-sm-4">

      </div>
      <div class="col-sm-4">

      </div>
    </div>
  </footer>
  `
});
Vue.component("line-separate-button", {
  props:['link', 'title', 'target'],
  template: `
    <a :href="link" :target="target">
      <button class="line-separate-button">
        {{title}}
      </button>
    </a>
  `
});
Vue.component("main-header", {
  props:['buttons', 'imageLink', 'socialMediaLinks'],
  template: `
    <header class="main-layout">
      <img :src="imageLink" class="avatar" />
      <div class="title">
        <h1>
          <slot></slot>
        </h1>
        <div class="social-box">
          <social-media-icon
            v-for="(link, index) in socialMediaLinks"
            :key="'social-media-icon-'+index"
            :platform-name="link.icon"
            :link="link.address"
          ></social-media-icon>
        </div>
      </div>
      <nav>
        <line-separate-button :key="'headerbutton'+index" v-for="(button, index) in buttons" :title="button.title" :link="button.link" :target="button.target"></line-separate-button>
      </nav>
    </header>
  `
});
Vue.component("social-media-icon", {
  props:['link', 'platformName'],
  data:function(){
    return {
      githubLink:"",

    };
  },
  template: `
  <a target="_blank" class="social-media-button" :href="link" :alt="platformName">
    <img :src="'resources/social-media-icons/'+platformName+'_gray.svg'" class="social-media-icon gray">
    <img :src="'resources/social-media-icons/'+platformName+'_color.svg'" class="social-media-icon color" :alt="platformName">
  </a>
  `
});
Vue.component("error404", {

  template:`
    <div class="container card-item" card-index="_unknown_">
      <div class="row">
        <div class="col-12">
          <br>
          <br>
          <br>
          <h1 style="font-size:50px;font-family: 'VT323', monospace;" >ERROR 404</h1>
          <p style="font-size:20px;font-family: 'VT323', monospace;" >Content, that you search is not existing</p>
        </div>
      </div>
    </div>
  `
});
Vue.component("main-page-slider-slide", {
  props:['description',"type","src"],
  template: `
  <div class="main-slider-item">
    <div class="main-slider-item-inside">
      <div class="main-slider-item-background">
        <video
          v-if="type=='video'"
          class="main-slider-item-video"
          muted
          autoplay
          loop
        >
          <source
            v-for="source in src"
            :src="source.src"
            :type="source.type"
          >
        </video>
        <div
          v-if="type=='image'"
          class="main-slider-item-image"
          :style="'background-image:url('+src+')'"
        >
        </div>
      </div>
      <div class="main-slider-item-content">
        <h2>
          <slot></slot>
        </h2>
        <p>{{description}}</p>
      </div>
    </div>
  </div>
  `
});
Vue.component("main-page-slider", {
  template: `
    <div id="main-slider">
      <div class="main-slider-container">
        <slot></slot>
      </div>
    </div>
  `
});
Vue.component("search-results", {
  data:function(){
    return jquerySearchResultsHook;
  },
  methods:{
    paginationRange:function(page, pagesCount, limit){
      var ret=[];
      var initNum=0;
      if(limit/2<page){
        initNum=page-limit/2;
      }
      if(pagesCount-limit/2<page){
        initNum=pagesCount-limit;
      }
      if(pagesCount<limit){
        limit=pagesCount;
      }
      for(var i=initNum;i<initNum+limit;i++){
        ret.push(i+1);
      }
      return ret;
    },
    clickOnSearchButton:function(){
      if(searchResult.length==0){
        if(backgroundSettings.animationId!=localizationsSettings.places["_unknown_"].animationId){
          backgroundSettings.animationId=localizationsSettings.places["_unknown_"].animationId;
          backgroundSettings.intervalTime=localizationsSettings.places["_unknown_"].animationIntervalTime;
          changeBackground();
        }
      }else{
        if(backgroundSettings.animationId!=localizationsSettings.places["_index_"].animationId){
          backgroundSettings.animationId=localizationsSettings.places["_index_"].animationId;
          backgroundSettings.intervalTime=localizationsSettings.places["_index_"].animationIntervalTime;
          changeBackground();
        }
      }
    },
  },
  template: `
    <div class="container card-item" card-index="category">
      <div class="row">
        <!--<div class="col-12" >
          <input  style="font-family:monospace;color:white;background:black;border:1px solid white;padding:5px;width:100%" v-model="searchPhrase">
          <button  style="font-family:monospace;color:red;background:black;border:1px solid red;padding:10px;width:100%">search</button>
        </div>-->
        <h2 style="font-family:monospace;text-align:center" class="col-12" v-if="searchPhrase!=''">{{searchPhrase}}</h2>
      </div>
      <div v-if="searchResult.length!=0">
        <a target="_blank" v-for="item in searchResult" :href="item.link">
          <div style="margin:10px">
            <div class="search-result-box">
              <h4>{{item.title}}</h4>
              <p>{{item.desc}}</p>
            </div>
          </div>
        </a>
        <div>
          <center>
            <span v-for="number in paginationRange(page, pagesCount, 9)">
              <a :href="'#search/'+searchPhrase+'/'+number" class="paginator-item" v-if="page!=number">
                {{number}}
              </a>
              <span class="paginator-item-passive" v-if="page==number">
                {{number}}
              </span>
            </span>
          </center>
        </div>
      </div>
      <div v-if="searchResult.length==0">
        <br>
        <br>
        <br>
        <br>
        <center>
          <h3 style="font-family:monospace">NO RESULTS</h3>
          <img  src="resources/image/no-results-min.png">
        </center>
        <br>
        <br>
        <br>
        <br>
      </div>
    </div>
  `
});
Vue.component("start-screen", {
  props:[
    'content'
  ],
  template: `
    <div class="container card-item" card-index="_index_">
      <div class="row">
        <div class="col-lg-8">
          <main-page-slider>
            <main-page-slider-slide
              v-for="slide in content.slider"
              :description="slide.description"
              :type="slide.type"
              :src="slide.src"
            >
              {{slide.title}}
            </main-page-slider-slide>
          </main-page-slider>
        </div>
        <div class="col-lg-4">
          <about-me>
            {{content.about.content}}
          </about-me>
        </div>
        <div class="">
          <center>
            <category-buttons-container
              :categories="content.categories.items"
              :else-button="content.categories.elseButton"
            ></category-buttons-container>
          </center>
        </div>
        <div class="">
          <div>
          </div>
        </div>
      </div>
    </div>
  `
});
Vue.component("docs-display", {
 data:function(){
   return jqueryDocsDisplayHook;
 },
 methods:{
   newlineToBR:function(content){
     return content.split("\n");
   }
 },
 template:`
   <div class="container card-item" card-index="docs">
     <div class="row">
       <div class="col-12">
         <h1>{{title}}</h1>
       </div>
       <div class="col-sm-6 col-md-4 col-lg-3">
         <img :src="images[0]" width="100%">
       </div>
       <div class="col-sm-6 col-md-8 col-lg-9">
         <div>{{description}}</div>
         <div style="padding:10px;border:1px white dotted">
           <a style="color:red;text-decoration:none;" :href="'#search/'+category">
             {{category}}
           </a>
         </div>
       </div>
       <div style="color:white" class="col-12">
         <p v-for="line in newlineToBR(content)">{{line}}&nbsp;</p>
       </div>
       <div v-if="links.length>0">
         <h4>LINKS</h4>
         <ul>
           <a style="color:red;text-shadow:  0 0 3px #000000, 0 0 5px #000000, 0 0 12px #000000;" v-for="link in links" :href="link.href"><li>{{link.name}}</li></a>
         </ul>
       </div>
     </div>
   </div>
 `
});
Vue.component("category-buttons-container", {
  props:['categories', 'elseButton'],
  methods:{
    debug:function(text){
      //console.log(text);
      return "";
    }
  },
  template: `
    <div class="category-buttons-container">
      <h3 class="right-side-desc">CATEGORIES</h3>
      <category-button-box
        v-for="category in categories"
        :icon="category.icon"
        :link="category.link"
      >
        <div class="cbb-title">
          {{category.title}}
        </div>
        <div class="cbb-desc">
          {{category.text}}
        </div>
      </category-button-box>
      <category-button-box
        :icon="elseButton.icon"
        :link="elseButton.link"
        :pictures-gallery="elseButton.pictures"
      >
        ELSE
      </category-button-box>
    </div>
  `
});
Vue.component("category-button-box", {
  props:['icon', 'link'],
  methods:{
    debug:function(text){
      //console.log(text);
      return "";
    }
  },
  template: `
    <a :href="link">
      <div class="category-button-box">
        <div class="cbb-background" :debug="debug(icon)" :style="'background-image:url('+icon+')'">
        </div>
        <div class="cbb-slider">
          <div></div>
        </div>
        <div class="cbb-text">
          <slot></slot>
        </div>
      </div>
    </a>
  `
});
Vue.component("about-me", {
  props:['icon', 'link'],
  template: `
    <div>
      <center>
        <h3 class="about-me-title">About Me</h3>
      </center>
      <div class="about-me-content">
        <slot></slot>
      </div>
    </div>
  `
});
var vm=new Vue({
    el:"#app",
    methods:{
      photosLoader:function(){
        //getPosts
      },
      postsLoader:function(){

      },
      sendMessage:function(){
        sendFormMessage()
      }
    },
    data:{
      general:generalSettings,
      layout:{
        header:headerSettings,
        footer:footerSettings,
        content:{
          about:aboutSettings,
          slider:sliderSettings,
          socialMedia:socialmediaSettings,
          contact:{
            phoneNumbers:phoneList,
            emails:emailList,
            contactForm:{
              active:true,
              sendURL:"",
              config:{
                user:"",
                pass:"",
                host:""
              }
            }
          },
          categories:{
            items:categoriesList,
            elseButton:elsebuttonSettings
          }
        }
      },
      backgroundAnimation:backgroundSettings,
      photos:[],
      posts:[]
    }
  });

/*
CANVAS
*/
class animationObject{
  constructor(paint, container){
    this.paint=paint;
    this.container=container;
    this.loopIndex=0;
    this.defineListeners();
  }
  defineListeners(){

  }
  animate(){
    this.loopIndex++;
  }
  destroy(){

  }
}
class animationController{
  constructor(){
    //this.animationClass=[];
    //this.animationIDs=[];
    //this.theaterObjects=[];
    //this.theaterIDs=[];
    this.theaters=[];
    this.animations=[];
  }
  addAnimation(id, funct){
    this.animations.push({
      id:id,
      funct:funct
    });
    //this.animationIDs.push(id);
    //this.animationClass.push(funct);
  }
  getAnimationIdIndex(id){
    var i=0;
    while(i<this.animations.length){
      if(this.animations[i].id==id){
        break;
      }
      i++;
    }
    if(i<this.animations.length){
      return i;
    }else{
      throw "### ANIMATION ID NOT FOUND ###";
    }
  }
  getAnimation(id){
    return this.animations[this.getAnimationIdIndex(id)].funct;
  }
  listAnimations(){
    return this.animationIDs;
  }
  deleteAnimation(id){
    var indexToDelete=this.getAnimationIdIndex(id);
    this.animations.splice(indexToDelete, 1);
    //this.animationClass.splice(indexToDelete, 1);
    //this.animationIDs.splice(indexToDelete, 1);
  }
  changeTheaterAnimation(id, animationId, intervalTime){
    this.getTheater(id).changeAnimation(this.getAnimation(animationId), intervalTime);
    this.getTheater(id).startAnimation();
  }
  createTheater(id, animationId, intervalTime){
    //console.log("this.getAnimation(animationId):");
    //console.log(this.getAnimation(animationId));
    this.theaters.push({
      id:id,
      obj:new teatherObject(id, this.getAnimation(animationId), intervalTime)
    });
    //this.theaterObjects.push(new teatherObject(id, this.getAnimation(animationId), intervalTime));
    //this.theaterIDs.push(id);
  }
  deleteTheater(id){
    var hook=this.getTheater(id);
    if(hook==null){

    }else{
      hook.stopAnimation();
      //delete hook;
    }
  }
  getTheater(id){
    //return this.theaterObjects[this.getTheaterIdIndex(id)];
    var hook=this.theaters[this.getTheaterIdIndex(id)];
    if(hook==null){
      return null;
    }else{
      return hook.obj;
    }
  }
  getTheaterIdIndex(id){
    var i=0;
    while(i<this.theaters.length){
      if(this.theaters[i].id==id){
        break;
      }
      i++;
    }
    if(i<this.theaters.length){
      return i;
    }else{
      //return null;
      throw "### ANIMATION ID NOT FOUND ###";
    }
  }
}

class teatherObject{
  constructor(id, animationClass, intervalTime){
    this.container=document.getElementById(id);
    this.paint=this.container.getContext("2d");
    this.intervalHook=null;
    this.initAnimation(animationClass, intervalTime);
  }
  initAnimation(animationClass, intervalTime){
    this.backupAnimationClass=animationClass;
    this.intervalTime=intervalTime;
    //console.log(this.backupAnimationClass);
    this.activeAnimationClass=new animationClass(this.paint, this.container);
  }
  startAnimation(){
    var activeAnimationClass=this.activeAnimationClass;
    this.intervalHook=setInterval(function(){
      activeAnimationClass.animate();
    }, this.intervalTime);
  }
  stopAnimation(){
    clearInterval(this.intervalHook);
  }
  resetAnimation(){
    this.stopAnimation();
    this.activeAnimationClass.destroy();
    this.initAnimation(this.backupAnimationClass, this.intervalTime);
  }
  changeAnimation(animationClass, intervalTime){
    this.stopAnimation();
    this.activeAnimationClass.destroy();
    this.initAnimation(animationClass, intervalTime);
  }
}
function createAnimation(id, animationFunct, intervalTime){
  return new animationObject(id, animationFunct, intervalTime);
}
var animationControll=new animationController();
class redlinesInTheDarkness extends animationObject{

  animate(){
    //console.log(this);
    this.paint.fillStyle='rgba(0,0,0,0.1)';
    this.paint.fillRect(0,0,this.container.width,this.container.height);
    for(var i=0;i<8;i++){
      this.paint.lineWidth=Math.floor(Math.random()*3)+1;
      this.paint.strokeStyle="#"+Math.floor(Math.random()*4)+"00";
      this.paint.beginPath();
      this.paint.moveTo(this.container.width*Math.random(), this.container.height*Math.random());
      this.paint.lineTo(this.container.width*Math.random(), this.container.height*Math.random());
      this.paint.stroke();
    }
    this.loopIndex++;
  }
}
animationControll.addAnimation("redlinesInTheDarkness", redlinesInTheDarkness);
class sarverottMeditation extends animationObject{

  defineListeners(){
    this.puppet={
      loaded:0,
      ready:false,
      init:function(bodypices){
        for(var i=0;i<bodypices.length;i++){
          this.bodyparts.unshift({
            name:bodypices[i].name,
            image:new Image(),
            size:{
              width:0,
              height:0
            },
            src:bodypices[i].src,
            loaded:false
          });
        }
        for(var i=0;i<this.bodyparts.length;i++){
          this.addListener(i);
        }
        for(var i=0;i<this.bodyparts.length;i++){
          this.bodyparts[i].image.src=this.bodyparts[i].src;
        }
      },
      addListener:function(index){
        var parrent=this;
        this.bodyparts[index].image.addEventListener('load', function() {
          parrent.initPicture(index);
          console.log(index);
          console.log(parrent);
        }, false);
      },
      initPicture:function(index){
        console.log(index);
        this.bodyparts[index].loaded=true;
        this.bodyparts[index].size.width=this.bodyparts[index].image.naturalWidth;
        this.bodyparts[index].size.height=this.bodyparts[index].image.naturalHeight;
        this.loaded++;
        if(this.loaded>=this.bodyparts.length){
          this.ready=true;
        }
      },
      getBodyPart:function(name){
        for(i in this.bodyparts){
          if(this.bodyparts[i].name==name){
            return this.bodyparts[i].image;
            break;
          }
        }
      },
      bodyparts:[]
    };
    this.puppet.init([
      {
        name:"body",
        src:"/img/body-reduced.png"
      },
      {
        name:"head",
        src:"/img/head-reduced.png"
      },
      {
        name:"hand_right",
        src:"/img/hand_right-reduced.png"
      },
      {
        name:"hand_left",
        src:"/img/hand_left-reduced.png"
      }
    ]);
    this.hovero={
      active:true,
      current:20,
    };
  }
  printText(){
    art.font = "48px Arial Black";
    art.textBaseline = "middle";
    art.textAlign="center";
    art.fillStyle="#fff";
    art.fillText("CLICK ME", this.container.width/2, this.container.height/1.5);
  }
  animate(){
    this.paint.save();
    this.paint.clearRect(0,0,this.container.width,this.container.height);
    if(this.hovero.current!=20){
      for(var i=0;i<4;i++){
        this.paint.strokeStyle="#"+Math.floor(Math.random()*10)+"00";
        this.paint.beginPath();
        this.paint.moveTo(this.container.width*Math.random(), this.container.height*Math.random());
        this.paint.lineTo(this.container.width*Math.random(), this.container.height*Math.random());
        this.paint.stroke();
      }
    }
    this.paint.fillStyle="rgba(160,160,160,"+(this.hovero.current/20)+")";
    //console.log("rgba("+Math.round(255-(20-this.hovero.current)*5*Math.random())+","+Math.round(255-(20-this.hovero.current)*5*Math.random())+","+Math.round(255-(20-this.hovero.current)*5*Math.random())+",0.5)");
    this.paint.fillRect(0,0,this.container.width,this.container.height);
    this.paint.drawImage(this.puppet.getBodyPart("body"), this.container.width/2-this.puppet.getBodyPart("body").width/2, this.container.height/1.5-this.puppet.getBodyPart("body").height/2+Math.sin(this.loopIndex/10)*6);
    if(Math.random()>0.9&&!this.hovero.active){
      this.paint.translate(this.container.width/2, this.container.height/1.5-this.puppet.getBodyPart("body").height/2+Math.sin(this.loopIndex/10)*6);
      this.paint.rotate((Math.PI / 360) * (5-10*Math.random()));
      this.paint.translate(-(this.container.width/2), -(this.container.height/1.5-this.puppet.getBodyPart("body").height/2+Math.sin(this.loopIndex/10)*6));
      this.paint.drawImage(this.puppet.getBodyPart("head"), this.container.width/2-this.puppet.getBodyPart("head").width/2+Math.random()*6-3, this.container.height/1.5-this.puppet.getBodyPart("head").height/2-this.puppet.getBodyPart("body").height/1.5+Math.sin(this.loopIndex/10)*6+Math.random()*6-3);
    }else{
      this.paint.drawImage(this.puppet.getBodyPart("head"), this.container.width/2-this.puppet.getBodyPart("head").width/2, this.container.height/1.5-this.puppet.getBodyPart("head").height/2-this.puppet.getBodyPart("body").height/1.5+Math.sin(this.loopIndex/10)*6);
    }
    this.paint.restore();
    this.paint.save();
    //this.paint.rotate((Math.PI / 360) * (25));
    if(this.hovero.active&&this.hovero.current<20){
      this.hovero.current++;
    }else if(!this.hovero.active&&this.hovero.current>0){
      this.hovero.current--;
    }
    this.paint.translate(this.container.width/2+this.puppet.getBodyPart("body").width/8, this.container.height/1.5-this.puppet.getBodyPart("body").height/2.3+Math.sin(this.loopIndex/10)*6);
    this.paint.rotate((Math.PI / 90) * (this.hovero.current));
    this.paint.translate(-(this.container.width/2+this.puppet.getBodyPart("body").width/8), -(this.container.height/1.5-this.puppet.getBodyPart("body").height/2.3+Math.sin(this.loopIndex/10)*6));
    this.paint.drawImage(this.puppet.getBodyPart("hand_left"), this.container.width/2+this.puppet.getBodyPart("body").width/8, this.container.height/1.5-this.puppet.getBodyPart("body").height/2.3-this.puppet.getBodyPart("hand_left").height/2+Math.sin(this.loopIndex/10)*6);
    this.paint.restore();
    this.paint.save();
    //this.paint.rotate((Math.PI / 360) * (-25));
    this.paint.translate(this.container.width/2-this.puppet.getBodyPart("body").width/8, this.container.height/1.5-this.puppet.getBodyPart("body").height/2.3+Math.sin(this.loopIndex/10)*6);
    this.paint.rotate((Math.PI / 90) * (-this.hovero.current));
    this.paint.translate(-(this.container.width/2-this.puppet.getBodyPart("body").width/8), -(this.container.height/1.5-this.puppet.getBodyPart("body").height/2.3+Math.sin(this.loopIndex/10)*6));
    this.paint.drawImage(this.puppet.getBodyPart("hand_right"), this.container.width/2-this.puppet.getBodyPart("body").width/8-this.puppet.getBodyPart("hand_right").width, this.container.height/1.5-this.puppet.getBodyPart("hand_right").height/2-this.puppet.getBodyPart("body").height/2.3+Math.sin(this.loopIndex/10)*6);
    this.paint.restore();
    if(!this.hovero.active&&this.hovero.current==0&&th%21>7){
      printText();
    }
    this.loopIndex++;
  }
}
animationControll.addAnimation("sarverottMeditation", sarverottMeditation);
class squarePatternShades extends animationObject{
  defineListeners(){
    //this.paint.clearRect(0,0,this.container.width,this.container.height);
    this.fontSize=8;
    this.cols=[];
    this.animatorObject=class{
      constructor(hook, x, y, limit, height){
        this.paint=hook;
        this.y=y;
        this.limit=limit;
        this.height=height;
        this.x=x;
      }
      print(text){
        if(this.limit<this.y-text.length*this.height){
          this.y=0-this.height*Math.round(Math.random());
        }

        //this.paint.fillStyle='rgba(0,0,0,0.1)';
        //this.paint.fillRect(this.x,this.y-(this.height*text.length)-this.height,this.x+this.height,this.y+this.height);
        this.paint.fillStyle="#a00";
        this.paint.fillText(text.substr(0,1), this.x, this.y);
        for(var i=1;i<text.length;i++){
          this.paint.fillStyle="#"+Math.floor(((text.length-i)/text.length)*9)+"00";
          this.paint.fillText(text.substr(i,1), this.x, this.y-(i*this.height));
        }
        this.y+=this.height;
      }
    };
    var tmpCLASS=this.animatorObject;
    for(var i=0;i*this.fontSize*0.8<this.container.width;i++){
      this.cols.push(new tmpCLASS(
        this.paint,
        i*this.fontSize*0.8,
        Math.floor(this.container.height*Math.random()/this.fontSize)*this.fontSize,
        this.container.height,
        this.fontSize
      ));
    }
  }
  animate(){
    //console.log(this);
    this.paint.font=this.fontSize+"px monospace";
    this.paint.textAlign="center";
    this.paint.fillStyle='rgba(0,0,0,0.1)';
    this.paint.fillRect(0,0,this.container.width,this.container.height);
    //this.paint.clearRect(0,0,this.container.width,this.container.height);
    for(var i in this.cols){
      this.cols[i].print(randomString(9));
    }
    this.loopIndex++;
  }
}
animationControll.addAnimation("squarePatternShades", squarePatternShades);
class squareNoise extends animationObject{

  animate(){
    //console.log(this);
    this.paint.fillStyle='rgba(0,0,0,0.1)';
    this.paint.fillRect(0,0,this.container.width,this.container.height);
    for(var i=0;i<20;i++){
      //this.paint.lineWidth=Math.floor(Math.random()*3)+1;
      //this.paint.strokeStyle="#"+Math.floor(Math.random()*4)+"00";
      //this.paint.fillRect(0,0,Math.random()this.container.width,this.container.height);
      var x=Math.floor((Math.random()*(this.container.width))/10)*10;
      var y=Math.floor((Math.random()*(this.container.height))/10)*10;
      this.paint.fillStyle='#'+Math.floor(5*Math.random())+"00";
      this.paint.fillRect(x,y,10,10);
      //this.paint.beginPath();
      //this.paint.moveTo(this.container.width*Math.random(), this.container.height*Math.random());
      //this.paint.lineTo(this.container.width*Math.random(), this.container.height*Math.random());
      //this.paint.stroke();
    }
    this.loopIndex++;
  }
}
animationControll.addAnimation("squareNoise", squareNoise);
  /*
  JQUERY
  */
  $(window).on('hashchange', function(e){
    hashChangeEvent();
  });
  $(document).ready(function(){
    hashChangeEvent(false);
    try{
      base64encrypt(JSON.parse(getStatData()));
    }catch(e){
      null
    }
  });
  var actionController=function(label){
    switch(label){
      case 'docs':
        var hash=window.location.hash.split("/");
        if(hash.length>1){

        }else{

        }
      break;
    case 'category':
      pseudoCategorisation();
      //getCategory()
    }
  }
  function pseudoCategorisation(){
    jquerySearchResultsHook.pagesCount=0;
    jquerySearchResultsHook.searchPhrase=window.location.hash.split("/")[1];
    jquerySearchResultsHook.page=0;
    //$("#h-box").load("https://gist.github.com/Sarverott/6d82899884c20c9dd12594e8c54a19b5 .gist-content");
    if(docsListConfig.hasOwnProperty(jquerySearchResultsHook.searchPhrase)){
      jquerySearchResultsHook.searchResult=docsListConfig[jquerySearchResultsHook.searchPhrase];
    }else{
      jquerySearchResultsHook.searchResult=[];
    }
    /*
    switch(jquerySearchResultsHook.searchPhrase){
      case "docs":
        $.ajax({
          method:"GET",
          url:"https://gist.githubusercontent.com"+$("#file-docs-json .btn").attr("href"),
        }).then(function(data){
          console.log(data);
          jquerySearchResultsHook.searchResult=JSON.parse(data);
        });
        break;
      case "games":
        $.ajax({
          method:"GET",
          url:"https://gist.githubusercontent.com"+$("#file-games-json .btn").attr("href"),
        }).then(function(data){
          console.log(data);
          jquerySearchResultsHook.searchResult=JSON.parse(data);
        });
        break;
      case "programms":
        $.ajax({
          method:"GET",
          url:"https://gist.githubusercontent.com"+$("#file-programms-json .btn").attr("href"),
        }).then(function(data){
          console.log(data);
          jquerySearchResultsHook.searchResult=JSON.parse(data);
        });
        break;
      case "web":
        $.ajax({
          method:"GET",
          url:"https://gist.githubusercontent.com"+$("#file-web-json .btn").attr("href"),
        }).then(function(data){
          console.log(data);
          jquerySearchResultsHook.searchResult=JSON.parse(data);
        });
        break;
      default:
        jquerySearchResultsHook.searchResult=[];
    }
    */
  }
  function getCategory(){
    var phrase=window.location.hash.substring(window.location.hash.indexOf("/"));
    var toSearch="";
    var pageCounter=0;
    if(phrase.split("/").length>1&&Number.isInteger(parseInt(phrase.split("/")[1]))&&parseInt(phrase.split("/")[1])>0){
      pageCounter=parseInt(phrase.split("/")[1]);
    }
    if(phrase.indexOf("/")>0){
      $.ajax({
        method:"POST",
        url:generalSettings.apiAddress+"/api/getlist.php?site=sett%20sarverott%20site",
        data:{
          category:decodeURI(phrase.split("/")[0]),
          page:pageCounter
        }
      }).then(function(data){
        console.log(data);
        var d=JSON.parse(data);
        jquerySearchResultsHook.data.searchResult=d.result.list;
        jquerySearchResultsHook.data.pagesCount=d.result.count;
        jquerySearchResultsHook.data.searchPhrase=decodeURI(phrase.split("/")[0]);
        jquerySearchResultsHook.data.page=pageCounter
      });
    }else{
      $.ajax({
        method:"POST",
        url:generalSettings.apiAddress+"/api/getlist?site=sett%20sarverott%20site",
        data:{
          page:pageCounter
        }
      }).then(function(data){
        console.log(data);
        var d=JSON.parse(data);
        jquerySearchResultsHook.data.searchResult=d.result.list;
        jquerySearchResultsHook.data.pagesCount=d.result.count;
        jquerySearchResultsHook.data.page=pageCounter
      });
    }
  }
  function getDocument(){
    var id=window.location.hash.substring(window.location.hash.indexOf("/"));
    var toSearch="";
    //if(parseInt(id)+""!="NaN"){
      $.ajax({
        method:"POST",
        url:generalSettings.apiAddress+"/api/getdoc.php?site=sarverott",
        data:{
          id:parseInt(id)
        }
      }).then(function(data){
        console.log(data);
        var d=JSON.parse(data);
        for(var i in d.result){
            jqueryDocsDisplayHook.data[i]=d.result[i];
        }
      });
    //}
  }
  function hashChangeEvent(init=true){

    generalSettings.localization=window.location.hash;
    var loc=generalSettings.localization.substring(1, generalSettings.localization.indexOf("/"));
    if(typeof(localizationsSettings.places[loc])!="undefined"){
      displayCard(loc);
      backgroundSettings.animationId=localizationsSettings.places[loc].animationId;
      backgroundSettings.intervalTime=localizationsSettings.places[loc].animationIntervalTime;
    }else if(window.location.hash=="#"||window.location.hash==""){
      displayCard("_index_");
      backgroundSettings.animationId=localizationsSettings.places["_index_"].animationId;
      backgroundSettings.intervalTime=localizationsSettings.places["_index_"].animationIntervalTime;
    }else{
      displayCard("_unknown_");
      backgroundSettings.animationId=localizationsSettings.places["_unknown_"].animationId;
      backgroundSettings.intervalTime=localizationsSettings.places["_unknown_"].animationIntervalTime;
    }
    if(init){
      changeBackground();
    }
    window.scrollTo(0,0);
  }
  function changeCard(cardName){

  }
  function getStatData(){
    return {
      browser:getBrowserName,
      platform:navigator.platform
    };
  }
  function displayCard(idx){
    console.log(idx);

      actionController(idx);
    $('.card-item').each(function(index, element){
      //console.log(element)
      if(idx==$(element).attr("card-index")){
        $(element).show();
      }else{
        $(element).hide();
      }
    })
  }
  $(document).ready(function(){
    $(window).resize(function(){
      canvasFitting();
    });
    canvasFitting();
    var tmpCanvasConfig=vm._data.backgroundAnimation;
    animationControll.createTheater(tmpCanvasConfig.id, tmpCanvasConfig.animationId, tmpCanvasConfig.intervalTime);
    changeBackground();
  });
  function changeBackground(){
    var tmpCanvasConfig=vm._data.backgroundAnimation
    animationControll.changeTheaterAnimation(tmpCanvasConfig.id, tmpCanvasConfig.animationId, tmpCanvasConfig.intervalTime);
  }
  function canvasFitting(){
    //document.getElementsByClassName('background-canvas')[0].width=$(window).width();
    //document.getElementsByClassName('background-canvas')[0].height=$(window).height();
    $('.background-canvas').width($(window).width());
    $('.background-canvas').height($(window).height());
  }
  function titleAnimation(){
    var i=0;
    var tmpStr=vm._data.layout.header.title;
    var firstInterval=setInterval(function(){
      titleAnimationFrame(i++,tmpStr,8);
      if(i>5+tmpStr.length){
        clearInterval(firstInterval);
        setInterval(function(){
          titleAnimationFrame(i++,tmpStr,1);
        },400);
      }
    },50);
  }

  function titleAnimationFrame(frame, content, divide){
    if(frame<5){
      $(".title h1").html("");
      if(divide>frame%(divide*2)){
        $(".title h1").append("_");
      }else{
        $(".title h1").append("&nbsp;");
      }
    }else if(frame==5){
      $(".title h1").html("");
      $(".title h1").append(
        $("<span>").addClass("title-content")
      ).append(
        $("<span>").addClass("title-floor")
      );
    }else{
      if(frame<5+content.length){
        $(".title-content").append(content.substring(frame-6,frame-5));
      }
      if(divide>frame%(divide*2)){
        $(".title-floor").html("_");
      }else{
        $(".title-floor").html("&nbsp;");
      }
    }
    /*
    if(frame<5){
      $(".title h1").html("");
    }else if(frame>5+content.length){
      $(".title h1").html(content);
    }else{
      $(".title h1").html(content.substring(0,frame-5));
    }
    if(divide>frame%(divide*2)){
      $(".title h1").append("_");
    }else{
      $(".title h1").append("&nbsp;");
    }
    */
  }

  $(document).ready(function(){
    titleAnimation();
  });
  $(document).ready(function(){
    var sliderIndex=0;
    $(".main-slider-item:nth-of-type(1)")
      .addClass("middle-pos");
    //console.log($(".main-slider-item"));
    //console.log((sliderIndex++)%$(".main-slider-item").length);
    //console.log($(".main-slider-item").addClass("animate"));
    setInterval(function(){
      var hide=(sliderIndex++)%$(".main-slider-item").length;
      var show=sliderIndex%$(".main-slider-item").length;
      $(".main-slider-item:nth-of-type("+(show+1)+")")
        .removeClass("animate-me")
        .removeClass("bottom-pos")
        .removeClass("middle-pos");
      setTimeout(function(){
        $(".main-slider-item:nth-of-type("+(hide+1)+")")
          .addClass("animate-me")
          .removeClass("middle-pos")
          .addClass("bottom-pos");
        $(".main-slider-item:nth-of-type("+(show+1)+")")
          .addClass("animate-me")
          .addClass("middle-pos");
      },50);
    },10000);
  });
  function sendMessage(url, form, config){
    if(!validateEmail(form.email)){
      alert("wrong email!!!");
    }else{
      $.ajax({
        method:"POST",
        url:url,
        data:{
          log:btoa(JSON.stringify({
            user:config.user,
            pass:config.pass
          })),
          name:form.name,
          email:form.email,
          extradata:btoa(JSON.stringify({
            theme:form.theme,
            browser:getBrowserName(),
            referer:document.referrer,
            os:navigator.platform,
            lang:navigator.language,
            size:screen.availWidth+'x'+screen.availHeight
          })),
          message:form.message
        }
      }).done(function(msg){
        var tmp=JSON.parse(msg);
        if(tmp.result=="ok"){
          alert("Message has been sended ! ! ! ");
          location.replace("http://"+(typeof(config.host)=="String")?config.host:location.host+"/");
        }else{
          alert("fill fields with valid data!!!");
        }
      });
    }
  }
  loadNext();
